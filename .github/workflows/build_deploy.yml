name: Build & deploy to Amazon ECR

on:
  # push:
  workflow_dispatch:
    inputs:
      AWS_REGION:
        description: 'AWS Region of ECR'
        required: true
        default: '<ConfigureMe>'
      ECR_REPOSITORY:
        description: 'AWS ECR name'
        required: true
        default: '<ConfigureMe>'
      CONTAINER_NAME:
        description: 'Container name'
        required: true
        default: 'spring4shell-demo'
      WORKDIR:
        description: 'WORKDIR / Container folder'
        required: true
        default: 'code/'

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build & tag image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.inputs.ECR_REPOSITORY }}
          CONTAINER_NAME: ${{ github.event.inputs.CONTAINER_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          WORKDIR: ${{ github.event.inputs.WORKDIR }}
        run: |
          # Build a docker container
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_NAME-$IMAGE_TAG "$WORKDIR"

      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.inputs.ECR_REPOSITORY }}
          CONTAINER_NAME: ${{ github.event.inputs.CONTAINER_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          WORKDIR: ${{ github.event.inputs.WORKDIR }}
        run: |
          # push it to ECR so that it can
          # be deployed to ECS.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_NAME-$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_NAME-$IMAGE_TAG"
